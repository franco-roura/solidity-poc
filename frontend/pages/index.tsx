import { AppBar, Box, Button, Divider, FormControl, IconButton, TextField, Toolbar, Typography } from '@mui/material'
import type { NextPage } from 'next'
import Head from 'next/head'
import MenuIcon from '@mui/icons-material/Menu'
import React, { FormEventHandler, useCallback, useEffect, useState } from 'react'
import useWeb3 from '../hooks/useWeb3'
import getLotteryContract, { LotteryContract } from '../interfaces/lottery'


const Home: NextPage = () => {
  const web3 = useWeb3()
  const [userAddress, setUserAddress] = useState<string>()
  const [lotteryContract, setLotteryContract] = useState<LotteryContract>()
  const [playerAddresses, setPlayerAddresses] = useState<string[]>()
  const [userBalance, setUserBalance] = useState<string>()
  const [managerAddress, setManagerAddress] = useState<string>()
  const [contractBalance, setContractBalance] = useState<string>()
  const [enterAmount, setEnterAmount] = useState('0.011')
  const [submitFeedback, setSubmitFeedback] = useState<string>()
  const [pickWinnerFeedback, setPickWinnerFeedback] = useState<string>()

  const amountError = parseFloat(enterAmount) <= 0.01
  const userIsManager = userAddress == managerAddress

  const fetchData = useCallback(async () => {
    if (!web3) return
    let mainAccount
    try {
      [mainAccount] = await web3.eth.getAccounts()
    } catch (error) {
      alert('You need to install Metamask or use MistBrowser to run this app.')
      return
    }
    if (!mainAccount) return
    setUserAddress(mainAccount)
    const contract = getLotteryContract(web3)
    setLotteryContract(contract)
    const balance = await web3.eth.getBalance(mainAccount)
    setUserBalance(web3.utils.fromWei(balance, 'ether'))
    const manager = await contract.methods.manager().call()
    setManagerAddress(manager)
    const players = await contract.methods.getPlayers().call()
    setPlayerAddresses(players)
    const contractBalance = await web3.eth.getBalance(contract.options.address)
    setContractBalance(web3.utils.fromWei(contractBalance, 'ether'))
  }, [web3])

  useEffect(() => {
    fetchData()
    window.ethereum?.on('accountsChanged', fetchData)
  }, [fetchData])

  const handleLogin = () => {
    if (window.ethereum?.request) window.ethereum.request({ method: 'eth_requestAccounts' })
  }


  const handleSubmit: FormEventHandler = async (event) => {
    if (!web3 || !userAddress || !lotteryContract) return
    event.preventDefault()
    const amount = web3.utils.toWei(enterAmount, 'ether')
    setSubmitFeedback('Waiting for transaction success...')
    try {
      await lotteryContract?.methods.enter().send({
        value: amount,
        from: userAddress
      })
      setSubmitFeedback('You have joined the lottery!')
      fetchData()
    } catch (error) {
      setSubmitFeedback('There was an error submitting the transaction. You have not joined the lottery.')
    }
  }

  const handlePickWinner = async () => {
    if (!lotteryContract || !userAddress) return
    setPickWinnerFeedback('Picking a winner...')
    try {
      await lotteryContract.methods.pickWinner().send({ from: userAddress })
      setPickWinnerFeedback('A winner has been picked! All contract balance has been sent to their address.')
      fetchData()
    } catch (error) {
      setPickWinnerFeedback('There was an error picking a winner.')
    }
  }

  return (
    <div>
      <Head>
        <title>Franco&apos;s Lottery</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <AppBar position="static">
        <Toolbar>
          <IconButton
            size="large"
            edge="start"
            color="inherit"
            aria-label="menu"
            sx={{ mr: 2 }}
          >
            <MenuIcon />
          </IconButton>
          <Typography variant="h6" component="div" sx={{ flexGrow: 1 }}>
            Ethereum Lottery
          </Typography>
          {!userAddress && <Button color="inherit" onClick={handleLogin}>Login</Button>}
        </Toolbar>
      </AppBar>
      <main>
        {Boolean(userAddress) && (
          <Box padding={2}>
            <Typography variant="body1" mb={2}>
              This contract is managed by {managerAddress}.
            </Typography>
            <Typography variant="body1" mb={2}>
              There are {playerAddresses?.length} people entered competing to win {contractBalance} ETH!
            </Typography>
            <Box mb={2}>
              <Divider />
            </Box>
            <form onSubmit={handleSubmit}>
              <Typography variant="body1" mb={2}>
                Your address is {userAddress} and you have {userBalance} ETH
              </Typography>
              <Typography variant="h6" mb={2}>
                Want to try your luck?
              </Typography>
              <FormControl sx={{ mb: 2 }} variant="filled" >
                <TextField
                  variant="filled"
                  id="filled-adornment-amount"
                  value={enterAmount}
                  label="Amount of ether to enter"
                  onChange={(event) => setEnterAmount(event.target.value)}
                  error={amountError}
                  helperText={amountError ? 'You need to bet more than 0.01!' : ''}
                />
              </FormControl>
              <Box mb={2}>
                <Button type="submit" disabled={amountError} variant="contained" color="secondary">Count me in!</Button>
              </Box>
            </form>
            {!!submitFeedback && (
              <Typography variant="body1" mb={2}>
                {submitFeedback}
              </Typography>
            )}
            <Box mb={2}>
              <Divider />
            </Box>
            {userIsManager && (
              <Box>
                <Typography variant="h6" mb={2}>
                  Time to pick a winner?
                </Typography>
                <Box mb={2}>
                  <Button onClick={handlePickWinner} variant="contained" color="secondary">Let&apos;s do it!</Button>
                </Box>
                {!!pickWinnerFeedback && (
                  <Typography variant="body1" mb={2}>
                    {pickWinnerFeedback}
                  </Typography>
                )}
              </Box>
            )}
          </Box>
        )}
        {!userAddress && (
          <Typography variant="body1">
            Please login
          </Typography>
        )}
      </main>

      <footer>
      </footer>
    </div>
  )
}

export default Home
